import sys
import heapq
input = sys.stdin.readline

def go(start):
    que=[]
    #시작 노드로 가기 위한 최단 경로는 0으로 설정하여 큐에 삽입
    heapq.heappush(que, (0, start))
    distances[start]=0
    #q가 비어있지 않다면
    while que:
        #가장 최단 거리인 노드에 대한 정보 꺼내기
        dist,now = heapq.heappop(que)
        #현재 노드가 이미 처리됐다면 skip
        if distances[now] < dist:
            continue
        #현재 노드와 연결된 다른 인접한 노드 확인
        for next, next_dist in graph[now]:
            cost = dist + next_dist
            #현재 노드를 거치이동 거리가 더 짧은 경우
            if cost < distances[next]:
                distances[next] = cost
                heapq.heappush(que, (next, cost))

INF = int(1e9)
V, E = map(int, input().split())
K = int(input())
graph = [[] for _ in range(V+1)]
distances = [INF]*(V+1)

for i in range(E):
    u, v ,w = map(int, input().split())
    graph[u].append([v,w])

go(K)

for i in range(1, V+1):
    if(distances[i] == INF):
        print('INF')
        continue
    print(distances[i])